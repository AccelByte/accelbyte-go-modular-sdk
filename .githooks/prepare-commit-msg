#!/usr/bin/env bash

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2

## ignore for commit merge
if [ "${COMMIT_SOURCE}" = merge ];then
    exit 0
fi

commit_message=$(cat "$COMMIT_MSG_FILE")

# Regular expression pattern for a conventional commit message
pattern="^([a-zA-Z0-9]+)(\([a-zA-Z0-9-]+\))?: (.+)$"

printSuggestion() {
    echo "Expected format: \"<type>[scope]: <description>\""
    echo "    Note: [scope] is mandatory"
    echo "Example of valid conventional commit messages:"
    echo "    - \"feat(iam): local validation token\""
    echo "    - \"fix(achievement): wrong response field type\""
    echo "    - \"chore(core): more readable struct properties\""
    echo "For more info go to https://www.conventionalcommits.org"
}

# Check if the commit message matches the pattern
if [[ $commit_message =~ $pattern ]]; then
    # Extract the scope using capture groups
    commit_scope="${BASH_REMATCH[2]}"
    # Remove parentheses from the scope
    commit_scope="${commit_scope#\(}"
    commit_scope="${commit_scope%\)}"

    if [ -z "$commit_scope" ]; then
        echo "[ERROR] Commit message scope should not be empty: \"$commit_message\""
        printSuggestion
        exit 1
    fi

    exit 0
else
    echo "[ERROR] Invalid conventional commit message: \"$commit_message\""
    printSuggestion
    exit 1
fi