library(
  identifier: 'jenkins-shared-library@master',
  retriever: modernSCM(
    [
      $class: 'GitSCMSource',
      remote: 'https://github.com/dhanarab/jenkins-pipeline-library.git'
    ]
  )
)

githubOwner = 'AccelByte'
githubRepo = 'accelbyte-go-modular-sdk'
githubSsh = 'accelbyte-sdk-sdkbuild-ssh'
githubPat = 'accelbyte-sdk-sdkbuild-pat-github'
bitbucketSsh = 'bitbucket-build-extend-ssh'

githubUrl = "git@github.com:${githubOwner}/${githubRepo}.git"

def createGithubRelease(tag_name, prerelease = false, name = null, body = null) {
  def request = ['tag_name': tag_name]
  if (name) {
    request['name'] = name
  }
  if (body) {
    request['body'] = body
  }
  request['prerelease'] = prerelease
  httpRequest(
    url : "https://api.github.com/repos/${githubOwner}/${githubRepo}/releases",
    httpMode: 'POST',
    requestBody: JsonOutput.toJson(request),
    contentType: 'APPLICATION_JSON',
    authentication: githubPat,
    validResponseCodes: '200:201'
  )
}

pipeline {
  agent {
    label "master"
  }
  stages {
    stage('Prepare') {
      steps {
        script {
          currentBuild.displayName = "#${env.BUILD_NUMBER} ${params.ACTION}"
          gitHost = sh(script: "echo '${githubUrl}' | grep -oP '(?<=@).+(?=:)'", returnStdout: true).trim()
          sh "grep -q ${gitHost} ~/.ssh/known_hosts || ssh-keyscan ${gitHost} | tee -a ~/.ssh/known_hosts"
        }
      }
    }
    stage('Push') {
      when {
        expression { 
          return params.ACTION == 'PUSH'
        }
      }
      steps {
        script {
          sh "git checkout master"
          sshagent(credentials: [githubSsh])
          {
            sh "git push ${githubUrl} HEAD:main"
          }
        }
      }
    }
    stage('Release') {
      when {
        expression { 
          return params.ACTION == 'PUSH+RELEASE'
        }
      }
      steps {
        script {
          if (params.RELEASE_NOTE ==~ /(?s).*@[A-Za-z0-9_-]+@.*/)
          {
            echo 'Release note still contains one or more template placeholders e.g. @VERSION@, etc. Please check.'
            sh 'false' // Fail this job
          }
          sh "git checkout ${params.RELEASE_BRANCH}"
          sshagent(credentials: [githubSsh])
          {
            if (params.RELEASE_BRANCH == "master") {
              sh "git push ${githubUrl} HEAD:main"
            }
            else {
              sh "git push ${githubUrl} HEAD:${params.RELEASE_BRANCH}"
            }
            sh "git push ${githubUrl} ${params.RELEASE_TAG}"
          }
          // if tag is service sdk module
          if (params.RELEASE_TAG =~ /.*-sdk\/v[0-9]+.[0-9]+.[0-9]+.*/) {
            // release tag for: service sdk module and it service wrapper (compat layer)
            serviceName = params.RELEASE_TAG.split("-")[0]
            serviceVersion = params.RELEASE_TAG.split("-sdk/v")[-1]
            serviceWrapperTag = "services-api/pkg/service/${serviceName}/v${serviceVersion}"
            
            checkTagResult = sh(script: "if [ \$(git tag -l ${serviceWrapperTag}) ]; then exit 0; else exit 1; fi", returnStatus: true)
            if (checkTagResult != 0) {
              // tag for service wrapper not exist
              error("Error: you're trying to release ${params.RELEASE_TAG} which is a service sdk but corresponding service wrapper ${serviceWrapperTag} not found")
            }
            
            // createGithubRelease(params.RELEASE_TAG, params.IS_PRERELEASE, params.RELEASE_TAG, params.RELEASE_NOTE)
            // createGithubRelease(serviceWrapperTag, params.IS_PRERELEASE, serviceWrapperTag, params.RELEASE_NOTE)
            if (params.RELEASE_TAG.contains("lobby-sdk")) {
              lobbyServicesWrapperTag = "services-api/pkg/service/v${serviceVersion}"
              isLobbyServiceTagExist = sh(script: "if [ \$(git tag -l ${lobbyServicesWrapperTag}) ]; then exit 0; else exit 1; fi", returnStatus: true)
              if (isLobbyServiceTagExist != 0) {
                error("Error: you're trying to release ${params.RELEASE_TAG} which is a service sdk but corresponding service wrapper ${lobbyServicesWrapperTag} not found")
              }
              // createGithubRelease(lobbyServicesWrapperTag, params.IS_PRERELEASE, lobbyServicesWrapperTag, params.RELEASE_NOTE)
            }
          } else {
            //createGithubRelease(params.RELEASE_TAG, params.IS_PRERELEASE, params.RELEASE_TAG, params.RELEASE_NOTE)
          }
        }
      }
    }
    stage('Pull') {
      when {
        expression { 
          return params.ACTION == 'PULL'
        }
      }
      steps {
        script {
          sh "git checkout master"
          sshagent(credentials: [githubSsh])
          {
            sh "git pull ${githubUrl} main"
          }
          sshagent(credentials: [bitbucketSsh])
          {
            sh "git push"
          }
        }
      }
    }
  }
  post {
    failure {
      script {
        message = """
            :no_entry: <${env.BUILD_URL}|${env.JOB_NAME}-${env.BUILD_NUMBER}> *failed*
            
            |*Action*
            |${params.ACTION}
            
            |""".stripMargin()
        slackSend(channel: "#activity-justice-codegen-modular-sdk", color: '#FF0000', message: message)
      }
    }
  }
}
